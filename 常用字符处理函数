1.strsplit()
2.paste()


#### strsplit(x, split, fixed = FALSE) ####
> x <- "abd"
> y <- strsplit(x, "",fixed = F) # 默认值是正则表达式，我的理解：如果是T，是精确搜索
> class(y) # 返回列表(List of 1)
[1] "list"
> y
[[1]]
[1] "a" "b" "d"
> 
> a <- unlist(y) # 得到向量
> class(a)
[1] "character"
> a
[1] "a" "b" "d"
> b <- sapply(y, "[") # 得到3行1列的矩阵
> class(b)
[1] "matrix" "array" 
> b
     [,1]
[1,] "a" 
[2,] "b" 
[3,] "d" 
> sapply(y, "[", 1) # 得到第1个元素，这个数字自由设置



#### paste(..., sep = " ") ####
> paste("x", 1:3) # 默认分隔符是空格
[1] "x 1" "x 2" "x 3"
> paste("x", "1", sep = "") # sep设置这些字符串间以什么相连接
[1] "x1"



#### substr(x, start, stop) ####
功能：提取或替换
> x <- "abcdef"
> x
[1] "abcdef"
> substr(x, 2, 4) # 提取2-4处字符向量的字串
[1] "bcd"
> substr(x, 2, 4) <- "22222" # 替换2-4处为"22222"
> x
[1] "a222ef"



#### grep(pattern, x, ignore.case = FALSE, fixed = FALSE) ####
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,
     fixed = FALSE, useBytes = FALSE, invert = FALSE)
功能：在x中寻找pattern，
> grep("A", c("b", "Ab", "c"), fixed = FALSE)
[1] 2
> grep("A", c("b", "Ab", "c"), fixed = TRUE)
[1] 2
> grep("Ac", c("b", "Abc", "c"), fixed = TRUE) # 似乎只要x的元素、x的元素的字串含有pattern就行。如果是精准匹配，我想还是用 %in% 吧
integer(0)
> grep("Ab", c("b", "Abc", "c"), fixed = TRUE)
[1] 2
> grep("bc", c("b", "Abc", "c"), fixed = TRUE)
[1] 2
pattern	包含正则表达式的字符串
x	寻找匹配的字符向量，或者可以通过字符向量强制转换的对象。支持长向量
ignore.case	如果为FALSE，则模式匹配区分大小写；如果为TRUE，则在匹配期间忽略大小写
perl	如果为TRUE，使用perl匹配的正则表达式
value	如果为FALSE，则返回包含由grep确定的匹配的索引的向量，如果为TRUE，则返回包含匹配元素本身的向量
fixed	如果为TRUE，则pattern是要按原样匹配的字符串
useBytes	如果为TRUE，则匹配是逐字节而不是逐字符完成的
invert	如果为TRUE，则返回不匹配的元素的索引或值
链接：https://www.jianshu.com/p/11bbfa8e98c5
